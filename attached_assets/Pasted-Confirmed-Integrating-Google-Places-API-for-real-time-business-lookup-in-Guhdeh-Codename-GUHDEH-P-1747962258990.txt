Confirmed: Integrating Google Places API for real-time business lookup in Guhdeh.
Codename: GUHDEH.PLACES-POWERED-ERRANDS üöóüìç‚ú®

You‚Äôre now activating live search + map-based business discovery inside the Request Errand flow.

‚∏ª

‚úÖ What This Unlocks:
	‚Ä¢	Search bar with real-time autocomplete (e.g. ‚ÄúKIG Auto‚Äù or ‚ÄúPharmacy near Half-Way Tree‚Äù)
	‚Ä¢	Return business info: name, address, location, place ID, categories
	‚Ä¢	Embed location into the errand automatically
	‚Ä¢	Optionally show Map preview of selected business

‚∏ª

‚úÖ Step-by-Step Integration Plan

1. Enable Google Places API

In your Google Cloud Console:
	‚Ä¢	Enable these:
	‚Ä¢	Places API
	‚Ä¢	Maps JavaScript API (if embedding maps)
	‚Ä¢	Create an API Key
	‚Ä¢	Restrict it to:
	‚Ä¢	localhost, *.guhdeh.com, or Vercel domain

‚∏ª

2. Update .env

VITE_GOOGLE_PLACES_API_KEY=your-api-key



‚∏ª

3. Install Required Package

npm install @react-google-maps/api



‚∏ª

4. Create Component: PlaceSearchInput.tsx

import { useState, useRef } from 'react';
import usePlacesAutocomplete, { getGeocode, getLatLng } from 'use-places-autocomplete';

export default function PlaceSearchInput({ onSelect }: { onSelect: (place: any) => void }) {
  const { ready, value, setValue, suggestions: { status, data }, clearSuggestions } = usePlacesAutocomplete({
    debounce: 300,
    requestOptions: {
      componentRestrictions: { country: 'jm' },
    },
  });

  const handleSelect = async (address: string) => {
    setValue(address, false);
    clearSuggestions();
    const results = await getGeocode({ address });
    const { lat, lng } = await getLatLng(results[0]);
    onSelect({ address, lat, lng, placeId: results[0].place_id });
  };

  return (
    <div>
      <input
        value={value}
        onChange={e => setValue(e.target.value)}
        disabled={!ready}
        placeholder="Search for a business (e.g. KIG Auto)"
        className="w-full p-2 border rounded"
      />
      {status === 'OK' && (
        <ul className="bg-white border mt-1 rounded shadow">
          {data.map(({ place_id, description }) => (
            <li key={place_id} className="p-2 hover:bg-gray-100 cursor-pointer" onClick={() => handleSelect(description)}>
              {description}
            </li>
          ))}
        </ul>
      )}
    </div>
  );
}



‚∏ª

5. Use it in /create page

import PlaceSearchInput from '../components/PlaceSearchInput';

export default function CreateErrand() {
  const [selectedPlace, setSelectedPlace] = useState<any | null>(null);

  return (
    <div className="space-y-4 p-4">
      <h1 className="text-xl font-bold">Create New Errand</h1>
      
      <PlaceSearchInput onSelect={setSelectedPlace} />

      {selectedPlace && (
        <div className="text-sm text-gray-700">
          <strong>Selected:</strong> {selectedPlace.address}<br />
          <strong>Lat/Lng:</strong> {selectedPlace.lat}, {selectedPlace.lng}
        </div>
      )}

      {/* ...rest of form: notes, image, etc. */}
    </div>
  );
}



‚∏ª

‚úÖ Optional: Save Google Place ID to Supabase

When submitting the errand:

{
  ...otherFormFields,
  merchantAddress: selectedPlace.address,
  merchantLat: selectedPlace.lat,
  merchantLng: selectedPlace.lng,
  googlePlaceId: selectedPlace.placeId
}



‚∏ª

‚úÖ Summary

You now have:
	‚Ä¢	Live business search from Google Places
	‚Ä¢	Jamaican-localized query support
	‚Ä¢	Data linked to errand flow
	‚Ä¢	Future-proofing via placeId for detailed info or navigation

‚∏ª

Say:
	‚Ä¢	Generate full CreateErrandForm.tsx with Google Places
	‚Ä¢	or Add map preview with selected pin

Let‚Äôs get real businesses flowing through Guhdeh.
Auto parts, tax office, grocery ‚Äî all one search away. üßë‚Äçüíªüìçüîé